@page "/istruttori"
@using Padel.Core.Entities;
@using Padel.Core.Interfaces;
@using DemoPadel.RazorLibrary.Components

@inject IDatiIstruttori servizioDatiIstruttori
@inject NavigationManager navigationManager

@if(istruttoreCorrente == null)
{
<button class="btn btn-info" @onclick="() => Aggiungi()">Aggiungi Istruttore</button>
<ListaIstruttoriPadel 
    Istruttori="@IstruttoriDisponibili"
    OnIstruttoreEliminato="EliminaIstruttore"
    OnIstruttoreModificato="ModificaIstruttore"
    OnIstruttoreSelezionato="SelezionaIstruttore"
    Titolo="Istruttori disponibili nel prossimo mese"/>
} else
{
    <Dettaglio OnAnnulla="Annulla" OnSalva="Salva" Istruttore="@istruttoreCorrente"></Dettaglio>
}

@code {
    private IstruttorePadel? istruttoreCorrente;

    private List<IstruttorePadel> IstruttoriDisponibili = new();

    protected override async Task OnInitializedAsync()
    {
        IstruttoriDisponibili = await servizioDatiIstruttori.EstraiIstruttoriDisponibiliAsync();
    }

    private void SelezionaIstruttore(IstruttorePadel istruttore)
    {
        navigationManager.NavigateTo($"/istruttore/{istruttore.Id}");
    }

    private async Task Salva(IstruttorePadel istruttore)
    {
        if (istruttore.Id > 0)
        {
            await servizioDatiIstruttori.ModificaIstruttoreDisponibileAsync(istruttore);

        }
        else
        {
            await servizioDatiIstruttori.AggiungiIstruttoreDisponibileAsync(istruttore);
        }

        IstruttoriDisponibili = await servizioDatiIstruttori.EstraiIstruttoriDisponibiliAsync();

        istruttoreCorrente = null;
    }


    // private void Salva(IstruttorePadel istruttore)
    // {
    //     if(istruttore.Id > 0)
    //     {
    //         servizioDatiIstruttori.ModificaIstruttoreDisponibile(istruttore);

    //     } else
    //     {
    //         servizioDatiIstruttori.AggiungiIstruttoreDisponibile(istruttore);
    //     }

    //     istruttoreCorrente = null;
    // }

    private void Annulla()
    {
        istruttoreCorrente = null;
    }

    private void ModificaIstruttore(IstruttorePadel istruttore)
    {
        istruttoreCorrente = istruttore;
    }

    private async Task EliminaIstruttore(IstruttorePadel istruttore)
    {
        await servizioDatiIstruttori.EliminaIstruttoreDisponibileAsync(istruttore);
        IstruttoriDisponibili = await servizioDatiIstruttori.EstraiIstruttoriDisponibiliAsync();
    }

    private void Aggiungi()
    {
        istruttoreCorrente = new IstruttorePadel() { DataAssunzioneIstruttore = DateTime.Today};
    }
}
